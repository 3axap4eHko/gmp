/*! Generated by redux-scfld not for editing */

import {
  STATUS_PROCESS,
  STATUS_SUCCESS,
  STATUS_FAILURE,
  // Namespaces
  NAMESPACE_CONFIG,
  NAMESPACE_PARAMS,
  // Types
  CONFIG_LOAD,
  CONFIG_SET,
  PARAMS_RESET,
  PARAMS_SET,
} from './../types';

import configLoadAction from './config/load';
import configSetAction from './config/set';
import paramsResetAction from './params/reset';
import paramsSetAction from './params/set';

function _createProcess(namespace, type, ...args) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_PROCESS,
    args,
  };
}
function _createSuccess(namespace, type, result) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_SUCCESS,
    result,
  };
}
function _createFailure(namespace, type, error, args) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_FAILURE,
    args,
    error,
  };
}

function _createAction(namespace, type, action) { // eslint-disable-line no-underscore-dangle
  return (...args) => (dispatch, getState) => {
    dispatch(_createProcess(namespace, type, ...args));
    return new Promise(resolve => resolve(action(getState, ...args)))
      .then(result => dispatch(_createSuccess(namespace, type, result)))
      .catch(error => dispatch(_createFailure(namespace, type, error, args)));
  };
}


export const configLoad = _createAction(
  NAMESPACE_CONFIG,
  CONFIG_LOAD,
  configLoadAction,
);

export const configSet = _createAction(
  NAMESPACE_CONFIG,
  CONFIG_SET,
  configSetAction,
);

export const paramsReset = _createAction(
  NAMESPACE_PARAMS,
  PARAMS_RESET,
  paramsResetAction,
);

export const paramsSet = _createAction(
  NAMESPACE_PARAMS,
  PARAMS_SET,
  paramsSetAction,
);

